package blockchain

import (
	"encoding/hex"
	"fmt"
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/optimism-java/interopbackend/pkg/event"
)

func TestRemoveContract(t *testing.T) {
	contracts = GetContracts()
	fmt.Println(GetContracts())
	AddContract("0x05F9613aDB30026FFd634f38e5C4dFd30a197Ba1")
	AddContract("CC")
	fmt.Println(GetContracts())
	RemoveContract("0x05f9613adB30026FFd634f38e5C4dFd30a197ba1")
	RemoveContract("BB")
	RemoveContract("CC")
	fmt.Println(GetContracts())
}

// 382409ac69001e11931a28435afef442cbfd20d9891907e8fa373ba7d351f320
// 0000000000000000000000000000000000000000000000000000000000000386 destination
// 0000000000000000000000004200000000000000000000000000000000000028 target
// 0000000000000000000000000000000000000000000000000000000000000000 messageNonce
// 0000000000000000000000004200000000000000000000000000000000000028 sender
// 0000000000000000000000000000000000000000000000000000000000000040 偏移量
// 0000000000000000000000000000000000000000000000000000000000000084 长度
// 7cfd6dbc000000000000000000000000420beef000000000000000000000000000000001000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb9226600000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000 message
// sendMessage payloadMsg : 382409ac69001e11931a28435afef442cbfd20d9891907e8fa373ba7d351f3200000000000000000000000000000000000000000000000000000000000000386000000000000000000000000420000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000847cfd6dbc000000000000000000000000420beef000000000000000000000000000000001000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb9226600000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000
// 也就是sendMessage 的calldata数据
func TestHashL2toL2CrossDomainMessage(t *testing.T) {
	logs := "382409ac69001e11931a28435afef442cbfd20d9891907e8fa373ba7d351f3200000000000000000000000000000000000000000000000000000000000000386000000000000000000000000420000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000847cfd6dbc000000000000000000000000420beef000000000000000000000000000000001000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb9226600000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000"
	s := crypto.Keccak256(common.Hex2Bytes(logs))
	// 与ExecutingMessage事件的msgHash匹配
	fmt.Println(hex.EncodeToString(s))

	sendMessageEvent := &event.SendMessage{}
	fmt.Println(sendMessageEvent.EventHash().Hex())
}

//// 来自sendMessage event  data数据 也就是relayMessage _sentMessage数据
//382409ac69001e11931a28435afef442cbfd20d9891907e8fa373ba7d351f320  selector
//0000000000000000000000000000000000000000000000000000000000000386  destination
//0000000000000000000000000000000000000000000000000000000000000385  source
//0000000000000000000000000000000000000000000000000000000000000000  nonce
//0000000000000000000000004200000000000000000000000000000000000028  sender
//0000000000000000000000004200000000000000000000000000000000000028  target
//0000000000000000000000000000000000000000000000000000000000000040
//0000000000000000000000000000000000000000000000000000000000000084
//7cfd6dbc000000000000000000000000420beef000000000000000000000000000000001000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb9226600000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000 message

/*
*
这个payload可以按照以下方式解析：

前32字节(64个hex字符): 0x0000...0040 - 表示message数据的偏移量(64)
接下来32字节: 0x0000...0084 - 表示message数据的长度(132)
实际message数据从7cfd6dbc开始

// 1. 偏移量
0x0000000000000000000000000000000000000000000000000000000000000040 //64 实际message数据的偏移量

// 2. 长度
0x0000000000000000000000000000000000000000000000000000000000000084 //132 字节

// 3. 实际message数据
7cfd6dbc // 函数选择器 4字节
000000000000000000000000420beef000000000000000000000000000000001 // 第一个参数 32字节
000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266 // 第二个参数 32字节
000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266 // 第三个参数 32字节
00000000000000000000000000000000000000000000000000000000000003e8 // 第四个参数 32字节
*/
//7cfd6dbc
//000000000000000000000000420beef000000000000000000000000000000001
//000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266
//000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266
//00000000000000000000000000000000000000000000000000000000000003e8
func TestHashCody(t *testing.T) {
	destination := big.NewInt(902)
	source := big.NewInt(901)
	target := common.HexToAddress("0x4200000000000000000000000000000000000028")
	nonce := big.NewInt(0)
	sender := common.HexToAddress("0x4200000000000000000000000000000000000028")

	// 从事件payload中解析出实际的message内容
	message := common.FromHex("7cfd6dbc000000000000000000000000420beef000000000000000000000000000000001000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb9226600000000000000000000000000000000000000000000000000000000000003e8")
	arguments := abi.Arguments{
		{Type: abi.Type{T: abi.UintTy, Size: 256}},
		{Type: abi.Type{T: abi.UintTy, Size: 256}},
		{Type: abi.Type{T: abi.UintTy, Size: 256}},
		{Type: abi.Type{T: abi.AddressTy}},
		{Type: abi.Type{T: abi.AddressTy}},
		{Type: abi.Type{T: abi.BytesTy}},
	}

	packed, _ := arguments.Pack(destination, source, nonce, sender, target, message)
	messageHash := crypto.Keccak256Hash(packed)
	// 与RelayedMessage事件的messageHash匹配
	fmt.Println(messageHash)
}

// 382409ac69001e11931a28435afef442cbfd20d9891907e8fa373ba7d351f320
// 0000000000000000000000000000000000000000000000000000000000000386 destination
// 0000000000000000000000004200000000000000000000000000000000000028 target
// 0000000000000000000000000000000000000000000000000000000000000000 messageNonce
// 0000000000000000000000004200000000000000000000000000000000000028 sender
// 0000000000000000000000000000000000000000000000000000000000000040 偏移量
// 0000000000000000000000000000000000000000000000000000000000000084 长度
// 7cfd6dbc000000000000000000000000420beef000000000000000000000000000000001000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb9226600000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000 message
// sendMessage payloadMsg : 382409ac69001e11931a28435afef442cbfd20d9891907e8fa373ba7d351f3200000000000000000000000000000000000000000000000000000000000000386000000000000000000000000420000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000847cfd6dbc000000000000000000000000420beef000000000000000000000000000000001000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb9226600000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000
// 也就是sendMessage 的calldata数据
func TestSendMsg(t *testing.T) {
	payload := "382409ac69001e11931a28435afef442cbfd20d9891907e8fa373ba7d351f3200000000000000000000000000000000000000000000000000000000000000386000000000000000000000000420000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000847cfd6dbc000000000000000000000000420beef000000000000000000000000000000001000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb9226600000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000"

	rawData := common.Hex2Bytes(payload)

	selector := rawData[:32]

	destination := new(big.Int).SetBytes(rawData[32:64])
	target := common.BytesToAddress(rawData[64:96])
	nonce := new(big.Int).SetBytes(rawData[96:128])
	sender := common.BytesToAddress(rawData[128:160])
	messageStart := 160 + 64
	message := rawData[messageStart:]

	fmt.Printf("Selector: 0x%x\n", selector)
	fmt.Printf("Target: %s\n", target.Hex())
	fmt.Printf("Destination: %v\n", destination)
	fmt.Printf("Nonce: %v\n", nonce)
	fmt.Printf("Sender: %s\n", sender.Hex())
	fmt.Printf("Message: 0x%x\n", message)
	fmt.Printf("relayMsgHash: 0x%x\n", selector)
}
